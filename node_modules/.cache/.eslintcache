[{"/Users/selenbilgic/Desktop/fresh-canvas/src/index.js":"1","/Users/selenbilgic/Desktop/fresh-canvas/src/App.js":"2","/Users/selenbilgic/Desktop/fresh-canvas/src/reportWebVitals.js":"3","/Users/selenbilgic/Desktop/fresh-canvas/src/CanvasComponent.js":"4"},{"size":535,"mtime":1690215414748,"results":"5","hashOfConfig":"6"},{"size":429,"mtime":1690215392758,"results":"7","hashOfConfig":"6"},{"size":362,"mtime":1690210044000,"results":"8","hashOfConfig":"6"},{"size":4317,"mtime":1690216258550,"results":"9","hashOfConfig":"6"},{"filePath":"10","messages":"11","suppressedMessages":"12","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},"1uz8y9t",{"filePath":"14","messages":"15","suppressedMessages":"16","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"17","messages":"18","suppressedMessages":"19","errorCount":0,"fatalErrorCount":0,"warningCount":0,"fixableErrorCount":0,"fixableWarningCount":0,"usedDeprecatedRules":"13"},{"filePath":"20","messages":"21","suppressedMessages":"22","errorCount":0,"fatalErrorCount":0,"warningCount":1,"fixableErrorCount":0,"fixableWarningCount":0,"source":"23"},"/Users/selenbilgic/Desktop/fresh-canvas/src/index.js",[],[],[],"/Users/selenbilgic/Desktop/fresh-canvas/src/App.js",[],[],"/Users/selenbilgic/Desktop/fresh-canvas/src/reportWebVitals.js",[],[],"/Users/selenbilgic/Desktop/fresh-canvas/src/CanvasComponent.js",["24"],[],"import React, { useEffect, useRef, useState, useCallback } from 'react';\nconst CanvasComponent = () => {\n    \n    const canvasRef = useRef(null);\n\n    // Variables for panning\n    const [panX, setPanX] = useState(0);\n    const [panY, setPanY] = useState(0);\n\n    // Variables for zooming\n    const [zoom, setZoom] = useState(1);\n    const zoomFactor = 1.01;\n    const minZoom = 0.6; // minimum zoom level\n    const maxZoom = 3; // maximum zoom level\n\n    // Variables for mouse panning\n    const [isPanning, setIsPanning] = useState(false);\n    const [startPanX, setStartPanX] = useState(0);\n    const [startPanY, setStartPanY] = useState(0);\n\n    const drawGrid = (ctx, canvas) => {\n        ctx.beginPath();\n        ctx.strokeStyle = \"lightgray\";\n        ctx.lineWidth = 2;\n      \n        // calculate the number of lines to draw based on the zoom level\n        const numLines = Math.ceil(Math.max(canvas.width, canvas.height) / (5 * zoom));\n        \n        // draw vertical lines\n        for (let i = -numLines; i <= numLines; i++) {\n          const x = (panX % (15 * zoom)) + i * 15 * zoom;\n          ctx.moveTo(x, -canvas.height);\n          ctx.lineTo(x, canvas.height);\n        }\n        \n        // draw horizontal lines\n        for (let i = -numLines; i <= numLines; i++) {\n          const y = (panY % (15 * zoom)) + i * 15 * zoom;\n          ctx.moveTo(-canvas.width, y);\n          ctx.lineTo(canvas.width, y);\n        }\n      \n        ctx.stroke();\n      };\n      \n\n    // Draw function\n    const draw = useCallback((ctx, canvas) => {\n        // clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // save context state\n        ctx.save();\n\n        // translate and scale context\n        ctx.translate(panX, panY);\n        ctx.scale(zoom, zoom);\n\n        // draw grid\n        drawGrid(ctx, canvas);\n\n        // restore context state\n        ctx.restore();\n\n        // request next animation frame\n        requestAnimationFrame(() => draw(ctx, canvas));\n    }, [panX, panY, zoom]);\n\n    // useEffect to handle canvas drawing and events\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        let animationFrameId;\n\n        const render = () => {\n            draw(ctx, canvas);\n            animationFrameId = window.requestAnimationFrame(render);\n        };\n        render();\n\n        // Add event listeners for panning and zooming\n        const handleMouseDown = (event) => {\n            setIsPanning(true);\n            setStartPanX(event.clientX - panX);\n            setStartPanY(event.clientY - panY);\n        };\n        const handleMouseMove = (event) => {\n            if (isPanning) {\n              // calculate new pan values\n              let newPanX = event.clientX - startPanX;\n              let newPanY = event.clientY - startPanY;\n          \n              // update pan values\n              setPanX(newPanX);\n              setPanY(newPanY);\n            }\n          };\n          const handleWheel = (event) => {\n            event.preventDefault();\n          \n            // update zoom based on scroll direction\n            let newZoom;\n            if (event.deltaY < 0) {\n              newZoom = zoom * zoomFactor;\n            } else {\n              newZoom = zoom / zoomFactor;\n            }\n          \n            // update zoom value\n            setZoom(newZoom);\n          };\n          \n        const handleMouseUp = () => setIsPanning(false);\n\n\n        canvas.addEventListener('mousedown', handleMouseDown);\n        canvas.addEventListener('mousemove', handleMouseMove);\n        window.addEventListener('mouseup', handleMouseUp);\n        canvas.addEventListener('wheel', handleWheel);\n\n        return () => {\n\n            window.cancelAnimationFrame(animationFrameId);\n            canvas.removeEventListener('mousedown', handleMouseDown);\n            canvas.removeEventListener('mousemove', handleMouseMove);\n            window.removeEventListener('mouseup', handleMouseUp);\n            canvas.removeEventListener('wheel', handleWheel);\n        };\n    }, [draw, panX, panY, startPanX, startPanY, isPanning, zoom, zoomFactor, minZoom, maxZoom]);\n\n    return <canvas ref={canvasRef} />;\n};\nexport default CanvasComponent;",{"ruleId":"25","severity":1,"message":"26","line":67,"column":8,"nodeType":"27","endLine":67,"endColumn":26,"suggestions":"28"},"react-hooks/exhaustive-deps","React Hook useCallback has a missing dependency: 'drawGrid'. Either include it or remove the dependency array.","ArrayExpression",["29"],{"desc":"30","fix":"31"},"Update the dependencies array to be: [drawGrid, panX, panY, zoom]",{"range":"32","text":"33"},[1997,2015],"[drawGrid, panX, panY, zoom]"]