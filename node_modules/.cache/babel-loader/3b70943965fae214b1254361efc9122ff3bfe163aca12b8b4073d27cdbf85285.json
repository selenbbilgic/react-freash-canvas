{"ast":null,"code":"var _jsxFileName = \"/Users/kaandai/Desktop/react-freash-canvas/src/CanvasComponent.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useRef, useState, useCallback } from 'react';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst CanvasComponent = () => {\n  _s();\n  const canvasRef = useRef(null);\n  const [canvasItems, setCanvasItems] = useState([]);\n  //const [dragItem, setDragItem] = useState(null);\n  const [dragging, setDragging] = useState(false);\n  const [dragItemIndex, setDragItemIndex] = useState(null);\n\n  // Variables for panning\n  const [panX, setPanX] = useState(0);\n  const [panY, setPanY] = useState(0);\n\n  // Variables for zooming\n  const [zoom, setZoom] = useState(1);\n  const zoomFactor = 1.01;\n  const minZoom = 0.6; // minimum zoom level\n  const maxZoom = 3; // maximum zoom level\n\n  // Variables for mouse panning\n  /* const [isPanning, setIsPanning] = useState(false);\n   const [startPanX, setStartPanX] = useState(0);\n   const [startPanY, setStartPanY] = useState(0); */\n\n  const drawGrid = useCallback((ctx, canvas) => {\n    ctx.beginPath();\n    ctx.strokeStyle = \"lightgray\";\n    ctx.lineWidth = 2;\n\n    // calculate the number of lines to draw based on the zoom level\n    const numLines = Math.ceil(Math.max(canvas.width, canvas.height) / (5 * zoom));\n\n    // draw vertical lines\n    for (let i = -numLines; i <= numLines; i++) {\n      const x = panX % (15 * zoom) + i * 15 * zoom;\n      ctx.moveTo(x, -canvas.height);\n      ctx.lineTo(x, canvas.height);\n    }\n\n    // draw horizontal lines\n    for (let i = -numLines; i <= numLines; i++) {\n      const y = panY % (20 * zoom) + i * 15 * zoom;\n      ctx.moveTo(-canvas.width, y);\n      ctx.lineTo(canvas.width, y);\n    }\n    ctx.stroke();\n  }, [panX, panY, zoom]);\n\n  // Draw function\n  const draw = useCallback((ctx, canvas) => {\n    // clear canvas\n    ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n    // save context state\n    ctx.save();\n\n    // translate and scale context\n    ctx.translate(panX, panY);\n    ctx.scale(zoom, zoom);\n\n    // draw grid\n    drawGrid(ctx, canvas);\n\n    // restore context state\n    ctx.restore();\n\n    // request next animation frame\n    requestAnimationFrame(() => draw(ctx, canvas));\n    ctx.font = \"16px Arial\";\n    ctx.fillStyle = \"black\";\n    for (const item of canvasItems) {\n      ctx.fillText(item.text, item.x, item.y);\n    }\n  }, [panX, panY, zoom, canvasItems]);\n  const onDrop = event => {\n    event.preventDefault();\n    const data = event.dataTransfer.getData(\"text/plain\");\n\n    // Calculate the position where the item was dropped and add the item to the canvas items array\n    const rect = canvasRef.current.getBoundingClientRect();\n    const x = (event.clientX - rect.left - panX) / zoom;\n    const y = (event.clientY - rect.top - panY) / zoom;\n    setCanvasItems([...canvasItems, {\n      text: data,\n      x,\n      y\n    }]);\n  };\n  const onDragOver = event => {\n    event.preventDefault(); // This is necessary to allow a drop.\n  };\n\n  const onMouseDown = useCallback(event => {\n    const rect = canvasRef.current.getBoundingClientRect();\n    const mouseX = (event.clientX - rect.left - panX) / zoom;\n    const mouseY = (event.clientY - rect.top - panY) / zoom;\n    for (let i = canvasItems.length - 1; i >= 0; i--) {\n      const item = canvasItems[i];\n      // considering each character as 16px wide and 24px tall\n      if (mouseX >= item.x && mouseX <= item.x + 16 * item.text.length && mouseY >= item.y - 24 && mouseY <= item.y) {\n        setDragging(true);\n        setDragItemIndex(i);\n        break;\n      }\n    }\n  }, [canvasItems, panX, panY, zoom]);\n  const onMouseUp = useCallback(() => {\n    setDragging(false);\n    setDragItemIndex(null);\n  }, []);\n  const onMouseMove = useCallback(event => {\n    if (isPanning) {\n      // calculate new pan values\n      let newPanX = event.clientX - startPanX;\n      let newPanY = event.clientY - startPanY;\n\n      // define maximum and minimum allowed pan values\n      const maxPanX = 900;\n      const maxPanY = 500;\n      const minPanX = 800;\n      const minPanY = 300;\n\n      // check if new pan values exceed maximum or minimum allowed values\n      if (newPanX > maxPanX) {\n        newPanX = maxPanX;\n      } else if (newPanX < minPanX) {\n        newPanX = minPanX;\n      }\n      if (newPanY > maxPanY) {\n        newPanY = maxPanY;\n      } else if (newPanY < minPanY) {\n        newPanY = minPanY;\n      }\n\n      // update pan values\n      setPanX(newPanX);\n      setPanY(newPanY);\n    }\n    if (dragging && dragItemIndex !== null) {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const x = (event.clientX - rect.left - panX) / zoom;\n      const y = (event.clientY - rect.top - panY) / zoom;\n      setCanvasItems(prevItems => {\n        const newItems = [...prevItems];\n        newItems[dragItemIndex] = {\n          ...newItems[dragItemIndex],\n          x,\n          y\n        };\n        return newItems;\n      });\n    }\n  }, [dragging, dragItemIndex, panX, panY, zoom]);\n\n  // useEffect to handle canvas drawing and events\n  useEffect(() => {\n    const canvas = canvasRef.current;\n    const ctx = canvas.getContext('2d');\n    canvas.width = window.innerWidth;\n    canvas.height = window.innerHeight;\n    let animationFrameId;\n    const render = () => {\n      draw(ctx, canvas);\n      animationFrameId = window.requestAnimationFrame(render);\n    };\n    render();\n\n    // Add event listeners for panning and zooming\n    /*const handleMouseDown = (event) => {\n        setIsPanning(true);\n        setStartPanX(event.clientX - panX);\n        setStartPanY(event.clientY - panY);\n    };\n     const handleMouseUp = () => {\n        setIsPanning(false);\n    };\n     const handleMouseMove = (event) => {\n      if (isPanning) {\n          // calculate new pan values\n          let newPanX = event.clientX - startPanX;\n          let newPanY = event.clientY - startPanY;\n                 // define maximum and minimum allowed pan values\n          const maxPanX = 900;\n          const maxPanY = 500;\n          const minPanX = 800;\n          const minPanY = 300;\n                 // check if new pan values exceed maximum or minimum allowed values\n          if (newPanX > maxPanX) {\n              newPanX = maxPanX;\n          } else if (newPanX < minPanX) {\n              newPanX = minPanX;\n          }\n          if (newPanY > maxPanY) {\n              newPanY = maxPanY;\n          } else if (newPanY < minPanY) {\n              newPanY = minPanY;\n          }\n                 // update pan values\n          setPanX(newPanX);\n          setPanY(newPanY);\n      }\n    }; */\n\n    const handleWheel = event => {\n      event.preventDefault();\n\n      // update zoom based on scroll direction\n      let newZoom;\n      if (event.deltaY < 0) {\n        newZoom = zoom * zoomFactor;\n      } else {\n        newZoom = zoom / zoomFactor;\n      }\n\n      // check if new zoom value is within allowed range\n      if (newZoom < minZoom) {\n        newZoom = minZoom;\n      } else if (newZoom > maxZoom) {\n        newZoom = maxZoom;\n      }\n\n      // update zoom value\n      setZoom(newZoom);\n    };\n    canvas.addEventListener('mousedown', onMouseDown);\n    canvas.addEventListener('mouseup', onMouseUp);\n    canvas.addEventListener('mouseout', onMouseUp);\n    canvas.addEventListener('mousemove', onMouseMove);\n    canvas.addEventListener('wheel', handleWheel);\n    return () => {\n      window.cancelAnimationFrame(animationFrameId);\n      canvas.removeEventListener('mousedown', onMouseDown);\n      canvas.removeEventListener('mouseup', onMouseUp);\n      canvas.removeEventListener('mouseout', onMouseUp);\n      canvas.removeEventListener('mousemove', onMouseMove);\n      canvas.removeEventListener('wheel', handleWheel);\n    };\n  }, [draw, onMouseDown, onMouseUp, onMouseMove]);\n  return /*#__PURE__*/_jsxDEV(\"canvas\", {\n    ref: canvasRef,\n    onDrop: onDrop,\n    onDragOver: onDragOver\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 253,\n    columnNumber: 12\n  }, this);\n};\n_s(CanvasComponent, \"npqLQ/+DbLDm6IUMmplKNBVoIeg=\");\n_c = CanvasComponent;\nexport default CanvasComponent;\nvar _c;\n$RefreshReg$(_c, \"CanvasComponent\");","map":{"version":3,"names":["React","useEffect","useRef","useState","useCallback","jsxDEV","_jsxDEV","CanvasComponent","_s","canvasRef","canvasItems","setCanvasItems","dragging","setDragging","dragItemIndex","setDragItemIndex","panX","setPanX","panY","setPanY","zoom","setZoom","zoomFactor","minZoom","maxZoom","drawGrid","ctx","canvas","beginPath","strokeStyle","lineWidth","numLines","Math","ceil","max","width","height","i","x","moveTo","lineTo","y","stroke","draw","clearRect","save","translate","scale","restore","requestAnimationFrame","font","fillStyle","item","fillText","text","onDrop","event","preventDefault","data","dataTransfer","getData","rect","current","getBoundingClientRect","clientX","left","clientY","top","onDragOver","onMouseDown","mouseX","mouseY","length","onMouseUp","onMouseMove","isPanning","newPanX","startPanX","newPanY","startPanY","maxPanX","maxPanY","minPanX","minPanY","prevItems","newItems","getContext","window","innerWidth","innerHeight","animationFrameId","render","handleWheel","newZoom","deltaY","addEventListener","cancelAnimationFrame","removeEventListener","ref","fileName","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["/Users/kaandai/Desktop/react-freash-canvas/src/CanvasComponent.js"],"sourcesContent":["import React, { useEffect, useRef, useState, useCallback } from 'react';\nconst CanvasComponent = () => {\n    \n    const canvasRef = useRef(null);\n    const [canvasItems, setCanvasItems] = useState([]);\n    //const [dragItem, setDragItem] = useState(null);\n    const [dragging, setDragging] = useState(false);\n    const [dragItemIndex, setDragItemIndex] = useState(null);\n\n\n\n    // Variables for panning\n    const [panX, setPanX] = useState(0);\n    const [panY, setPanY] = useState(0);\n\n    // Variables for zooming\n    const [zoom, setZoom] = useState(1);\n    const zoomFactor = 1.01;\n    const minZoom = 0.6; // minimum zoom level\n    const maxZoom = 3; // maximum zoom level\n\n    // Variables for mouse panning\n   /* const [isPanning, setIsPanning] = useState(false);\n    const [startPanX, setStartPanX] = useState(0);\n    const [startPanY, setStartPanY] = useState(0); */\n\n    const drawGrid = useCallback((ctx, canvas) => {\n      ctx.beginPath();\n      ctx.strokeStyle = \"lightgray\";\n      ctx.lineWidth = 2;\n    \n      // calculate the number of lines to draw based on the zoom level\n      const numLines = Math.ceil(Math.max(canvas.width, canvas.height) / (5 * zoom));\n      \n      // draw vertical lines\n      for (let i = -numLines; i <= numLines; i++) {\n        const x = (panX % (15 * zoom)) + i * 15 * zoom;\n        ctx.moveTo(x, -canvas.height);\n        ctx.lineTo(x, canvas.height);\n      }\n      \n      // draw horizontal lines\n      for (let i = -numLines; i <= numLines; i++) {\n        const y = (panY % (20 * zoom)) + i * 15 * zoom;\n        ctx.moveTo(-canvas.width, y);\n        ctx.lineTo(canvas.width, y);\n      }\n    \n      ctx.stroke();\n  }, [panX, panY, zoom]);\n\n    // Draw function\n    const draw = useCallback((ctx, canvas) => {\n        // clear canvas\n        ctx.clearRect(0, 0, canvas.width, canvas.height);\n\n        // save context state\n        ctx.save();\n\n        // translate and scale context\n        ctx.translate(panX, panY);\n        ctx.scale(zoom, zoom);\n\n        // draw grid\n        drawGrid(ctx, canvas);\n\n        // restore context state\n        ctx.restore();\n\n        // request next animation frame\n        requestAnimationFrame(() => draw(ctx, canvas));\n        ctx.font = \"16px Arial\";\n        ctx.fillStyle = \"black\";\n        for (const item of canvasItems) {\n            ctx.fillText(item.text, item.x, item.y);\n        }\n    }, [panX, panY, zoom, canvasItems]);\n\n    const onDrop = (event) => {\n      event.preventDefault();\n      const data = event.dataTransfer.getData(\"text/plain\");\n      \n      // Calculate the position where the item was dropped and add the item to the canvas items array\n      const rect = canvasRef.current.getBoundingClientRect();\n      const x = (event.clientX - rect.left - panX) / zoom;\n      const y = (event.clientY - rect.top - panY) / zoom;\n      setCanvasItems([...canvasItems, { text: data, x, y }]);\n  };\n\n    const onDragOver = (event) => {\n        event.preventDefault();  // This is necessary to allow a drop.\n    };\n\n    const onMouseDown = useCallback((event) => {\n      const rect = canvasRef.current.getBoundingClientRect();\n      const mouseX = (event.clientX - rect.left - panX) / zoom;\n      const mouseY = (event.clientY - rect.top - panY) / zoom;\n\n      for (let i = canvasItems.length - 1; i >= 0; i--) {\n        const item = canvasItems[i];\n        // considering each character as 16px wide and 24px tall\n        if (\n          mouseX >= item.x && \n          mouseX <= item.x + (16 * item.text.length) &&\n          mouseY >= item.y - 24 && \n          mouseY <= item.y\n        ) {\n          setDragging(true);\n          setDragItemIndex(i);\n          break;\n        }\n      }\n    }, [canvasItems, panX, panY, zoom]);\n\n    const onMouseUp = useCallback(() => {\n      setDragging(false);\n      setDragItemIndex(null);\n    }, []);\n\n    const onMouseMove = useCallback((event) => {\n      if (isPanning) {\n        // calculate new pan values\n        let newPanX = event.clientX - startPanX;\n        let newPanY = event.clientY - startPanY;\n\n        // define maximum and minimum allowed pan values\n        const maxPanX = 900;\n        const maxPanY = 500;\n        const minPanX = 800;\n        const minPanY = 300;\n\n        // check if new pan values exceed maximum or minimum allowed values\n        if (newPanX > maxPanX) {\n            newPanX = maxPanX;\n        } else if (newPanX < minPanX) {\n            newPanX = minPanX;\n        }\n        if (newPanY > maxPanY) {\n            newPanY = maxPanY;\n        } else if (newPanY < minPanY) {\n            newPanY = minPanY;\n        }\n\n        // update pan values\n        setPanX(newPanX);\n        setPanY(newPanY);\n    }\n      if (dragging && dragItemIndex !== null) {\n        const rect = canvasRef.current.getBoundingClientRect();\n        const x = (event.clientX - rect.left - panX) / zoom;\n        const y = (event.clientY - rect.top - panY) / zoom;\n        setCanvasItems(prevItems => {\n          const newItems = [...prevItems];\n          newItems[dragItemIndex] = { ...newItems[dragItemIndex], x, y };\n          return newItems;\n        });\n      }\n    }, [dragging, dragItemIndex, panX, panY, zoom]);\n    \n    // useEffect to handle canvas drawing and events\n    useEffect(() => {\n        const canvas = canvasRef.current;\n        const ctx = canvas.getContext('2d');\n        canvas.width = window.innerWidth;\n        canvas.height = window.innerHeight;\n        let animationFrameId;\n\n        const render = () => {\n            draw(ctx, canvas);\n            animationFrameId = window.requestAnimationFrame(render);\n        };\n        render();\n\n        // Add event listeners for panning and zooming\n        /*const handleMouseDown = (event) => {\n            setIsPanning(true);\n            setStartPanX(event.clientX - panX);\n            setStartPanY(event.clientY - panY);\n        };\n\n        const handleMouseUp = () => {\n            setIsPanning(false);\n        };\n\n        const handleMouseMove = (event) => {\n          if (isPanning) {\n              // calculate new pan values\n              let newPanX = event.clientX - startPanX;\n              let newPanY = event.clientY - startPanY;\n      \n              // define maximum and minimum allowed pan values\n              const maxPanX = 900;\n              const maxPanY = 500;\n              const minPanX = 800;\n              const minPanY = 300;\n      \n              // check if new pan values exceed maximum or minimum allowed values\n              if (newPanX > maxPanX) {\n                  newPanX = maxPanX;\n              } else if (newPanX < minPanX) {\n                  newPanX = minPanX;\n              }\n              if (newPanY > maxPanY) {\n                  newPanY = maxPanY;\n              } else if (newPanY < minPanY) {\n                  newPanY = minPanY;\n              }\n      \n              // update pan values\n              setPanX(newPanX);\n              setPanY(newPanY);\n          }\n      }; */\n\n      const handleWheel = (event) => {\n        event.preventDefault();\n    \n        // update zoom based on scroll direction\n        let newZoom;\n        if (event.deltaY < 0) {\n            newZoom = zoom * zoomFactor;\n        } else {\n            newZoom = zoom / zoomFactor;\n        }\n    \n        // check if new zoom value is within allowed range\n        if (newZoom < minZoom) {\n            newZoom = minZoom;\n        } else if (newZoom > maxZoom) {\n            newZoom = maxZoom;\n        }\n    \n        // update zoom value\n        setZoom(newZoom);\n    };\n\n        canvas.addEventListener('mousedown', onMouseDown);\n        canvas.addEventListener('mouseup', onMouseUp);\n        canvas.addEventListener('mouseout', onMouseUp);\n        canvas.addEventListener('mousemove', onMouseMove);\n        canvas.addEventListener('wheel', handleWheel);\n\n        return () => {\n            window.cancelAnimationFrame(animationFrameId);\n            canvas.removeEventListener('mousedown', onMouseDown);\n            canvas.removeEventListener('mouseup', onMouseUp);\n            canvas.removeEventListener('mouseout', onMouseUp);\n            canvas.removeEventListener('mousemove', onMouseMove);\n            canvas.removeEventListener('wheel', handleWheel);\n        };\n    }, [draw, onMouseDown, onMouseUp, onMouseMove]);\n\n    return <canvas ref={canvasRef} onDrop={onDrop} onDragOver={onDragOver} />;\n};\n\nexport default CanvasComponent;\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,MAAM,EAAEC,QAAQ,EAAEC,WAAW,QAAQ,OAAO;AAAC,SAAAC,MAAA,IAAAC,OAAA;AACxE,MAAMC,eAAe,GAAGA,CAAA,KAAM;EAAAC,EAAA;EAE1B,MAAMC,SAAS,GAAGP,MAAM,CAAC,IAAI,CAAC;EAC9B,MAAM,CAACQ,WAAW,EAAEC,cAAc,CAAC,GAAGR,QAAQ,CAAC,EAAE,CAAC;EAClD;EACA,MAAM,CAACS,QAAQ,EAAEC,WAAW,CAAC,GAAGV,QAAQ,CAAC,KAAK,CAAC;EAC/C,MAAM,CAACW,aAAa,EAAEC,gBAAgB,CAAC,GAAGZ,QAAQ,CAAC,IAAI,CAAC;;EAIxD;EACA,MAAM,CAACa,IAAI,EAAEC,OAAO,CAAC,GAAGd,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAM,CAACe,IAAI,EAAEC,OAAO,CAAC,GAAGhB,QAAQ,CAAC,CAAC,CAAC;;EAEnC;EACA,MAAM,CAACiB,IAAI,EAAEC,OAAO,CAAC,GAAGlB,QAAQ,CAAC,CAAC,CAAC;EACnC,MAAMmB,UAAU,GAAG,IAAI;EACvB,MAAMC,OAAO,GAAG,GAAG,CAAC,CAAC;EACrB,MAAMC,OAAO,GAAG,CAAC,CAAC,CAAC;;EAEnB;EACD;AACH;AACA;;EAEI,MAAMC,QAAQ,GAAGrB,WAAW,CAAC,CAACsB,GAAG,EAAEC,MAAM,KAAK;IAC5CD,GAAG,CAACE,SAAS,CAAC,CAAC;IACfF,GAAG,CAACG,WAAW,GAAG,WAAW;IAC7BH,GAAG,CAACI,SAAS,GAAG,CAAC;;IAEjB;IACA,MAAMC,QAAQ,GAAGC,IAAI,CAACC,IAAI,CAACD,IAAI,CAACE,GAAG,CAACP,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACS,MAAM,CAAC,IAAI,CAAC,GAAGhB,IAAI,CAAC,CAAC;;IAE9E;IACA,KAAK,IAAIiB,CAAC,GAAG,CAACN,QAAQ,EAAEM,CAAC,IAAIN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MAC1C,MAAMC,CAAC,GAAItB,IAAI,IAAI,EAAE,GAAGI,IAAI,CAAC,GAAIiB,CAAC,GAAG,EAAE,GAAGjB,IAAI;MAC9CM,GAAG,CAACa,MAAM,CAACD,CAAC,EAAE,CAACX,MAAM,CAACS,MAAM,CAAC;MAC7BV,GAAG,CAACc,MAAM,CAACF,CAAC,EAAEX,MAAM,CAACS,MAAM,CAAC;IAC9B;;IAEA;IACA,KAAK,IAAIC,CAAC,GAAG,CAACN,QAAQ,EAAEM,CAAC,IAAIN,QAAQ,EAAEM,CAAC,EAAE,EAAE;MAC1C,MAAMI,CAAC,GAAIvB,IAAI,IAAI,EAAE,GAAGE,IAAI,CAAC,GAAIiB,CAAC,GAAG,EAAE,GAAGjB,IAAI;MAC9CM,GAAG,CAACa,MAAM,CAAC,CAACZ,MAAM,CAACQ,KAAK,EAAEM,CAAC,CAAC;MAC5Bf,GAAG,CAACc,MAAM,CAACb,MAAM,CAACQ,KAAK,EAAEM,CAAC,CAAC;IAC7B;IAEAf,GAAG,CAACgB,MAAM,CAAC,CAAC;EAChB,CAAC,EAAE,CAAC1B,IAAI,EAAEE,IAAI,EAAEE,IAAI,CAAC,CAAC;;EAEpB;EACA,MAAMuB,IAAI,GAAGvC,WAAW,CAAC,CAACsB,GAAG,EAAEC,MAAM,KAAK;IACtC;IACAD,GAAG,CAACkB,SAAS,CAAC,CAAC,EAAE,CAAC,EAAEjB,MAAM,CAACQ,KAAK,EAAER,MAAM,CAACS,MAAM,CAAC;;IAEhD;IACAV,GAAG,CAACmB,IAAI,CAAC,CAAC;;IAEV;IACAnB,GAAG,CAACoB,SAAS,CAAC9B,IAAI,EAAEE,IAAI,CAAC;IACzBQ,GAAG,CAACqB,KAAK,CAAC3B,IAAI,EAAEA,IAAI,CAAC;;IAErB;IACAK,QAAQ,CAACC,GAAG,EAAEC,MAAM,CAAC;;IAErB;IACAD,GAAG,CAACsB,OAAO,CAAC,CAAC;;IAEb;IACAC,qBAAqB,CAAC,MAAMN,IAAI,CAACjB,GAAG,EAAEC,MAAM,CAAC,CAAC;IAC9CD,GAAG,CAACwB,IAAI,GAAG,YAAY;IACvBxB,GAAG,CAACyB,SAAS,GAAG,OAAO;IACvB,KAAK,MAAMC,IAAI,IAAI1C,WAAW,EAAE;MAC5BgB,GAAG,CAAC2B,QAAQ,CAACD,IAAI,CAACE,IAAI,EAAEF,IAAI,CAACd,CAAC,EAAEc,IAAI,CAACX,CAAC,CAAC;IAC3C;EACJ,CAAC,EAAE,CAACzB,IAAI,EAAEE,IAAI,EAAEE,IAAI,EAAEV,WAAW,CAAC,CAAC;EAEnC,MAAM6C,MAAM,GAAIC,KAAK,IAAK;IACxBA,KAAK,CAACC,cAAc,CAAC,CAAC;IACtB,MAAMC,IAAI,GAAGF,KAAK,CAACG,YAAY,CAACC,OAAO,CAAC,YAAY,CAAC;;IAErD;IACA,MAAMC,IAAI,GAAGpD,SAAS,CAACqD,OAAO,CAACC,qBAAqB,CAAC,CAAC;IACtD,MAAMzB,CAAC,GAAG,CAACkB,KAAK,CAACQ,OAAO,GAAGH,IAAI,CAACI,IAAI,GAAGjD,IAAI,IAAII,IAAI;IACnD,MAAMqB,CAAC,GAAG,CAACe,KAAK,CAACU,OAAO,GAAGL,IAAI,CAACM,GAAG,GAAGjD,IAAI,IAAIE,IAAI;IAClDT,cAAc,CAAC,CAAC,GAAGD,WAAW,EAAE;MAAE4C,IAAI,EAAEI,IAAI;MAAEpB,CAAC;MAAEG;IAAE,CAAC,CAAC,CAAC;EAC1D,CAAC;EAEC,MAAM2B,UAAU,GAAIZ,KAAK,IAAK;IAC1BA,KAAK,CAACC,cAAc,CAAC,CAAC,CAAC,CAAE;EAC7B,CAAC;;EAED,MAAMY,WAAW,GAAGjE,WAAW,CAAEoD,KAAK,IAAK;IACzC,MAAMK,IAAI,GAAGpD,SAAS,CAACqD,OAAO,CAACC,qBAAqB,CAAC,CAAC;IACtD,MAAMO,MAAM,GAAG,CAACd,KAAK,CAACQ,OAAO,GAAGH,IAAI,CAACI,IAAI,GAAGjD,IAAI,IAAII,IAAI;IACxD,MAAMmD,MAAM,GAAG,CAACf,KAAK,CAACU,OAAO,GAAGL,IAAI,CAACM,GAAG,GAAGjD,IAAI,IAAIE,IAAI;IAEvD,KAAK,IAAIiB,CAAC,GAAG3B,WAAW,CAAC8D,MAAM,GAAG,CAAC,EAAEnC,CAAC,IAAI,CAAC,EAAEA,CAAC,EAAE,EAAE;MAChD,MAAMe,IAAI,GAAG1C,WAAW,CAAC2B,CAAC,CAAC;MAC3B;MACA,IACEiC,MAAM,IAAIlB,IAAI,CAACd,CAAC,IAChBgC,MAAM,IAAIlB,IAAI,CAACd,CAAC,GAAI,EAAE,GAAGc,IAAI,CAACE,IAAI,CAACkB,MAAO,IAC1CD,MAAM,IAAInB,IAAI,CAACX,CAAC,GAAG,EAAE,IACrB8B,MAAM,IAAInB,IAAI,CAACX,CAAC,EAChB;QACA5B,WAAW,CAAC,IAAI,CAAC;QACjBE,gBAAgB,CAACsB,CAAC,CAAC;QACnB;MACF;IACF;EACF,CAAC,EAAE,CAAC3B,WAAW,EAAEM,IAAI,EAAEE,IAAI,EAAEE,IAAI,CAAC,CAAC;EAEnC,MAAMqD,SAAS,GAAGrE,WAAW,CAAC,MAAM;IAClCS,WAAW,CAAC,KAAK,CAAC;IAClBE,gBAAgB,CAAC,IAAI,CAAC;EACxB,CAAC,EAAE,EAAE,CAAC;EAEN,MAAM2D,WAAW,GAAGtE,WAAW,CAAEoD,KAAK,IAAK;IACzC,IAAImB,SAAS,EAAE;MACb;MACA,IAAIC,OAAO,GAAGpB,KAAK,CAACQ,OAAO,GAAGa,SAAS;MACvC,IAAIC,OAAO,GAAGtB,KAAK,CAACU,OAAO,GAAGa,SAAS;;MAEvC;MACA,MAAMC,OAAO,GAAG,GAAG;MACnB,MAAMC,OAAO,GAAG,GAAG;MACnB,MAAMC,OAAO,GAAG,GAAG;MACnB,MAAMC,OAAO,GAAG,GAAG;;MAEnB;MACA,IAAIP,OAAO,GAAGI,OAAO,EAAE;QACnBJ,OAAO,GAAGI,OAAO;MACrB,CAAC,MAAM,IAAIJ,OAAO,GAAGM,OAAO,EAAE;QAC1BN,OAAO,GAAGM,OAAO;MACrB;MACA,IAAIJ,OAAO,GAAGG,OAAO,EAAE;QACnBH,OAAO,GAAGG,OAAO;MACrB,CAAC,MAAM,IAAIH,OAAO,GAAGK,OAAO,EAAE;QAC1BL,OAAO,GAAGK,OAAO;MACrB;;MAEA;MACAlE,OAAO,CAAC2D,OAAO,CAAC;MAChBzD,OAAO,CAAC2D,OAAO,CAAC;IACpB;IACE,IAAIlE,QAAQ,IAAIE,aAAa,KAAK,IAAI,EAAE;MACtC,MAAM+C,IAAI,GAAGpD,SAAS,CAACqD,OAAO,CAACC,qBAAqB,CAAC,CAAC;MACtD,MAAMzB,CAAC,GAAG,CAACkB,KAAK,CAACQ,OAAO,GAAGH,IAAI,CAACI,IAAI,GAAGjD,IAAI,IAAII,IAAI;MACnD,MAAMqB,CAAC,GAAG,CAACe,KAAK,CAACU,OAAO,GAAGL,IAAI,CAACM,GAAG,GAAGjD,IAAI,IAAIE,IAAI;MAClDT,cAAc,CAACyE,SAAS,IAAI;QAC1B,MAAMC,QAAQ,GAAG,CAAC,GAAGD,SAAS,CAAC;QAC/BC,QAAQ,CAACvE,aAAa,CAAC,GAAG;UAAE,GAAGuE,QAAQ,CAACvE,aAAa,CAAC;UAAEwB,CAAC;UAAEG;QAAE,CAAC;QAC9D,OAAO4C,QAAQ;MACjB,CAAC,CAAC;IACJ;EACF,CAAC,EAAE,CAACzE,QAAQ,EAAEE,aAAa,EAAEE,IAAI,EAAEE,IAAI,EAAEE,IAAI,CAAC,CAAC;;EAE/C;EACAnB,SAAS,CAAC,MAAM;IACZ,MAAM0B,MAAM,GAAGlB,SAAS,CAACqD,OAAO;IAChC,MAAMpC,GAAG,GAAGC,MAAM,CAAC2D,UAAU,CAAC,IAAI,CAAC;IACnC3D,MAAM,CAACQ,KAAK,GAAGoD,MAAM,CAACC,UAAU;IAChC7D,MAAM,CAACS,MAAM,GAAGmD,MAAM,CAACE,WAAW;IAClC,IAAIC,gBAAgB;IAEpB,MAAMC,MAAM,GAAGA,CAAA,KAAM;MACjBhD,IAAI,CAACjB,GAAG,EAAEC,MAAM,CAAC;MACjB+D,gBAAgB,GAAGH,MAAM,CAACtC,qBAAqB,CAAC0C,MAAM,CAAC;IAC3D,CAAC;IACDA,MAAM,CAAC,CAAC;;IAER;IACA;AACR;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;AACA;;IAOM,MAAMC,WAAW,GAAIpC,KAAK,IAAK;MAC7BA,KAAK,CAACC,cAAc,CAAC,CAAC;;MAEtB;MACA,IAAIoC,OAAO;MACX,IAAIrC,KAAK,CAACsC,MAAM,GAAG,CAAC,EAAE;QAClBD,OAAO,GAAGzE,IAAI,GAAGE,UAAU;MAC/B,CAAC,MAAM;QACHuE,OAAO,GAAGzE,IAAI,GAAGE,UAAU;MAC/B;;MAEA;MACA,IAAIuE,OAAO,GAAGtE,OAAO,EAAE;QACnBsE,OAAO,GAAGtE,OAAO;MACrB,CAAC,MAAM,IAAIsE,OAAO,GAAGrE,OAAO,EAAE;QAC1BqE,OAAO,GAAGrE,OAAO;MACrB;;MAEA;MACAH,OAAO,CAACwE,OAAO,CAAC;IACpB,CAAC;IAEGlE,MAAM,CAACoE,gBAAgB,CAAC,WAAW,EAAE1B,WAAW,CAAC;IACjD1C,MAAM,CAACoE,gBAAgB,CAAC,SAAS,EAAEtB,SAAS,CAAC;IAC7C9C,MAAM,CAACoE,gBAAgB,CAAC,UAAU,EAAEtB,SAAS,CAAC;IAC9C9C,MAAM,CAACoE,gBAAgB,CAAC,WAAW,EAAErB,WAAW,CAAC;IACjD/C,MAAM,CAACoE,gBAAgB,CAAC,OAAO,EAAEH,WAAW,CAAC;IAE7C,OAAO,MAAM;MACTL,MAAM,CAACS,oBAAoB,CAACN,gBAAgB,CAAC;MAC7C/D,MAAM,CAACsE,mBAAmB,CAAC,WAAW,EAAE5B,WAAW,CAAC;MACpD1C,MAAM,CAACsE,mBAAmB,CAAC,SAAS,EAAExB,SAAS,CAAC;MAChD9C,MAAM,CAACsE,mBAAmB,CAAC,UAAU,EAAExB,SAAS,CAAC;MACjD9C,MAAM,CAACsE,mBAAmB,CAAC,WAAW,EAAEvB,WAAW,CAAC;MACpD/C,MAAM,CAACsE,mBAAmB,CAAC,OAAO,EAAEL,WAAW,CAAC;IACpD,CAAC;EACL,CAAC,EAAE,CAACjD,IAAI,EAAE0B,WAAW,EAAEI,SAAS,EAAEC,WAAW,CAAC,CAAC;EAE/C,oBAAOpE,OAAA;IAAQ4F,GAAG,EAAEzF,SAAU;IAAC8C,MAAM,EAAEA,MAAO;IAACa,UAAU,EAAEA;EAAW;IAAA+B,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OAAE,CAAC;AAC7E,CAAC;AAAC9F,EAAA,CA5PID,eAAe;AAAAgG,EAAA,GAAfhG,eAAe;AA8PrB,eAAeA,eAAe;AAAC,IAAAgG,EAAA;AAAAC,YAAA,CAAAD,EAAA"},"metadata":{},"sourceType":"module","externalDependencies":[]}